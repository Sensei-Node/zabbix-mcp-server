name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
    paths-ignore:
      - '*.md'
      - '*.toml'
      - 'aws_cleanup.sh'
  pull_request:
    branches: 
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Runs a set of commands using the runners shell
      - name: Steps before
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends curl python-is-python3 python3-dev python3-pip build-essential libffi-dev libssl-dev bash
          pip install --upgrade requests docker-py
          pip install cryptography
          pip install j2cli awscli

      # Update references
      - name: Git Submodule Update
        run: |
          git pull --recurse-submodules
          git submodule init
          git submodule update --remote --recursive

      - name: Build images 
        id: build-image
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}/
        run: |
          echo "REGISTRY_URL=${REGISTRY_URL}" >> .env
          docker compose build
          docker compose push

      - name: Prunning untagged Images
        id: aws-clean-ecr
        env:
          REGISTRY_URL: ${{ secrets.REGISTRY_URL }}
        run: |
          ./aws_cleanup.sh

      - name: Log out of Amazon ECR
        if: always()    
        run: docker logout ${{ steps.login-ecr.outputs.registry }}          